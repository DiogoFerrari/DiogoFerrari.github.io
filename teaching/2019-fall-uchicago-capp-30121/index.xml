<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CAPP 30121 – Computer Science with Applications 1 on Diogo Ferrari</title>
    <link>https://DiogoFerrari.github.io/teaching/2019-fall-uchicago-capp-30121/</link>
    <description>Recent content in CAPP 30121 – Computer Science with Applications 1 on Diogo Ferrari</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://DiogoFerrari.github.io/teaching/2019-fall-uchicago-capp-30121/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Syllabus</title>
      <link>https://DiogoFerrari.github.io/teaching/2019-fall-uchicago-capp-30121/syllabus/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://DiogoFerrari.github.io/teaching/2019-fall-uchicago-capp-30121/syllabus/</guid>
      <description>
&lt;h3 id=&#34;headline-1&#34;&gt;
Overview
&lt;/h3&gt;
&lt;p&gt;
This course is the first in a three-quarter sequence that teaches computational thinking and skills. The course will cover abstraction and decomposition, simple modeling, basic algorithms, and programming in Python. Applications from a wide variety of fields serve both as examples in lectures and as the basis for programming assignments. In recent offerings, students have written programs to simulate a model of housing segregation, determine the number of machines needed at a polling place, and analyze tweets from presidential debates.
&lt;/p&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Course Staff
&lt;/h3&gt;
&lt;h4 id=&#34;headline-3&#34;&gt;
Instructors
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Anne Rogers
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Diogo Ferrari (&lt;a href=&#34;mailto:diogoferrari@uchicago.edu&#34;&gt;email&lt;/a&gt;)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Lamont Samuels
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;headline-4&#34;&gt;
Teaching Assistants
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
TBA
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Office hours
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
TBA
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
Course Structure
&lt;/h3&gt;
&lt;p&gt;
The class meets three times a week for lectures, and once a week for a lab session. Graded work includes programming assignments and exams. Additionally, we provide practice problems throughout the quarter.
&lt;/p&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
Calendar/Readings
&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Day&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;Lecture&lt;/th&gt;
&lt;th&gt;Topic&lt;/th&gt;
&lt;th&gt;Readings&lt;/th&gt;
&lt;th&gt;Due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TBA&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;td&gt;Course Introduction&lt;/td&gt;
&lt;td&gt;R&amp;amp;S: Computational Thinking, Computational Thinking by J.Wing, (Optional) How the Matching Algorithm Works &amp;amp; (Optional) National Resident Match Program&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;td&gt;Introduction to Programming (practice)&lt;/td&gt;
&lt;td&gt;R&amp;amp;S: Programming Basics&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;3&lt;/td&gt;
&lt;td&gt;Conditionals; basic lists; for loops (practice)&lt;/td&gt;
&lt;td&gt;R&amp;amp;S: Control Flow&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;4&lt;/td&gt;
&lt;td&gt;Lists, strings (practice)&lt;/td&gt;
&lt;td&gt;R&amp;amp;S: Lists, Tuples &amp;amp; Strings&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;5&lt;/td&gt;
&lt;td&gt;Functions&lt;/td&gt;
&lt;td&gt;R&amp;amp;S: Introduction to Functions&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;6&lt;/td&gt;
&lt;td&gt;More functions (practice)&lt;/td&gt;
&lt;td&gt;R&amp;amp;S: Introduction to Functions&lt;/td&gt;
&lt;td&gt;PA 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;7&lt;/td&gt;
&lt;td&gt;Page rank example&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;8&lt;/td&gt;
&lt;td&gt;Dictionaries&lt;/td&gt;
&lt;td&gt;R&amp;amp;S: Dictionaries&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;9&lt;/td&gt;
&lt;td&gt;Files&lt;/td&gt;
&lt;td&gt;R&amp;amp;S: Working with Files&lt;/td&gt;
&lt;td&gt;PA 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;10&lt;/td&gt;
&lt;td&gt;Data Types&lt;/td&gt;
&lt;td&gt;R&amp;amp;S: Implementing a data structure: stacks and queues&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;11&lt;/td&gt;
&lt;td&gt;Classes&lt;/td&gt;
&lt;td&gt;R&amp;amp;S: Classes and Objects&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;12&lt;/td&gt;
&lt;td&gt;More Classes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PA 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;13&lt;/td&gt;
&lt;td&gt;More Classes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;strong&gt;EXAM&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;EXAM&lt;/td&gt;
&lt;td&gt;EXAM&lt;/td&gt;
&lt;td&gt;EXAM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;14&lt;/td&gt;
&lt;td&gt;M/D/1 Queues&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;15&lt;/td&gt;
&lt;td&gt;Functional Programming&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;16&lt;/td&gt;
&lt;td&gt;More Functional Programming&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;17&lt;/td&gt;
&lt;td&gt;Numpy&lt;/td&gt;
&lt;td&gt;R&amp;amp;S: Numpy&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;18&lt;/td&gt;
&lt;td&gt;More Numpy&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PA 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;19&lt;/td&gt;
&lt;td&gt;Pandas&lt;/td&gt;
&lt;td&gt;R&amp;amp;S: Pandas&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;20&lt;/td&gt;
&lt;td&gt;Pandas&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;21&lt;/td&gt;
&lt;td&gt;Pandas&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PA 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;22&lt;/td&gt;
&lt;td&gt;Record Linkage&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;23&lt;/td&gt;
&lt;td&gt;Record Linkage&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;24&lt;/td&gt;
&lt;td&gt;Record Linkage&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;25&lt;/td&gt;
&lt;td&gt;TBA&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PA 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;26&lt;/td&gt;
&lt;td&gt;TBA&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;27&lt;/td&gt;
&lt;td&gt;TBA&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;28&lt;/td&gt;
&lt;td&gt;Wrap-up&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PA 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;strong&gt;EXAM&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;EXAM&lt;/td&gt;
&lt;td&gt;EXAM&lt;/td&gt;
&lt;td&gt;EXAM&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
Programming assignments
&lt;/h3&gt;
&lt;p&gt;
We will be assigning seven programming assignments. You will be allowed to work in pairs in some of these assignments. See the calendar for details.
&lt;/p&gt;
&lt;p&gt;
In general, programming assignments are released on Saturday/Sunday, and are due on the following Friday.
&lt;/p&gt;
&lt;p&gt;
The labs are used to provide additional support for these programming assignments.
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;align-right&#34;&gt;Week&lt;/th&gt;
&lt;th&gt;Due date&lt;/th&gt;
&lt;th&gt;Due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;td&gt;TBA&lt;/td&gt;
&lt;td&gt;PA #1: Simulating SIR (solo)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PA #2: Schelling (pairs allowed)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PA #3: Twitter (pairs allowed)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;6&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PA #4: Polling places (pairs allowed)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PA #5: Linear Regression (solo)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PA #6: Traffic Stops (solo)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PA #7: Record linkage (pairs allowed)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
Exams
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Place: TBA
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Date: TBA
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;headline-10&#34;&gt;
Labs
&lt;/h3&gt;
&lt;p&gt;
The class will have weekly lab sections. The labs will provide an opportunity to get an overview of the week’s programming assignment and to work on either the week’s lab assignment or on your solution to the programming assignment.
&lt;/p&gt;
&lt;p&gt;
The lab assignments are not graded and do not have to be handed in, but we strongly encourage you to work through them, as they supplement what is covered in the lectures, and will often clarify certain concepts that are essential to be successful on the programming assignments.
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;align-right&#34;&gt;Week&lt;/th&gt;
&lt;th&gt;Day&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Topic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;td&gt;TBA&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Lab&lt;/em&gt; 1&lt;/td&gt;
&lt;td&gt;Linux&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;td&gt;TBA&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Lab&lt;/em&gt; 2&lt;/td&gt;
&lt;td&gt;Lists and Loops&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;3&lt;/td&gt;
&lt;td&gt;TBA&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Lab&lt;/em&gt; 3&lt;/td&gt;
&lt;td&gt;Functions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;4&lt;/td&gt;
&lt;td&gt;TBA&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Lab&lt;/em&gt; 4&lt;/td&gt;
&lt;td&gt;Dictionaries&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;6&lt;/td&gt;
&lt;td&gt;TBA&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Lab&lt;/em&gt; 5&lt;/td&gt;
&lt;td&gt;Classes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;7&lt;/td&gt;
&lt;td&gt;TBA&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Lab&lt;/em&gt; 6&lt;/td&gt;
&lt;td&gt;Numpy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;8&lt;/td&gt;
&lt;td&gt;TBA&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Lab&lt;/em&gt; 7&lt;/td&gt;
&lt;td&gt;Pandas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;9&lt;/td&gt;
&lt;td&gt;TBA&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Lab&lt;/em&gt; 8&lt;/td&gt;
&lt;td&gt;Record Linkage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;10&lt;/td&gt;
&lt;td&gt;TBA&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Lab&lt;/em&gt; 9&lt;/td&gt;
&lt;td&gt;Wrap-up&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;headline-11&#34;&gt;
Practice problems
&lt;/h3&gt;
&lt;p&gt;
We will periodically make a set of short problems available to you to test your knowledge of the material we are covering in class. Some of these problems will be of the “be a computer” variety and will require you to evaluate a piece of code by hand. Others will require you to write code. We will be using a system named Kattis to help you test your solutions to the latter type of problems.
&lt;/p&gt;
&lt;p&gt;
You will not submit these problems and they will not be graded. They will, however, help test your knowledge of the material needed to do the programming assignments and will be good practice for exams.
&lt;/p&gt;
&lt;h3 id=&#34;headline-12&#34;&gt;
Grading
&lt;/h3&gt;
&lt;p&gt;
Your final grade will be based on the following:
&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Programming assignments&lt;/td&gt;
&lt;td&gt;60%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Exam 1&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Exam 2&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Grades are not curved in this class or, at least, not in the traditional sense. We use a standard set of grade boundaries:
&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;95-100:&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;90-95:&lt;/td&gt;
&lt;td&gt;A-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;85-90:&lt;/td&gt;
&lt;td&gt;B+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;80-85:&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;75-80:&lt;/td&gt;
&lt;td&gt;B-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;70-75:&lt;/td&gt;
&lt;td&gt;C+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;70:&lt;/td&gt;
&lt;td&gt;Dealt on a case-by-case basis&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
We curve only to the extent we might lower the boundaries for one or more letter grades, depending on the distribution of the raw scores. We will not raise the boundaries in response to the distribution.
&lt;/p&gt;
&lt;p&gt;
So, for example, if you have a total score of 82 in the course, you are guaranteed to get, at least, a B (but may potentially get a higher grade if the boundary for a B+ is lowered).
&lt;/p&gt;
&lt;p&gt;
Students in the MS-CAPP program must take this course for a quality grade.
&lt;/p&gt;
&lt;p&gt;
Students in other programs may take the course pass/fail. A “pass” requires a 60 in the course and the average score of both exams must be at least 50 (i.e., if you get a 35 on the first exam, you will need to get at least a 65 on the second exam to pass, assuming your overall score on the class is at least 60)
&lt;/p&gt;
&lt;p&gt;
Instructions for how non-MS-CAPP students can request to take the class pass/fail will be sent closer to the end of the quarter. Please do not send your instructor such requests until we have posted instructions on how to do so.
&lt;/p&gt;
&lt;p&gt;
Requests to withdraw must be sent to the instructor.
&lt;/p&gt;
&lt;h3 id=&#34;headline-13&#34;&gt;
Late submissions
&lt;/h3&gt;
&lt;p&gt;
All students may use up to two 24-hour extensions for the programming assignments during the quarter. These extensions are all-or-nothing: you cannot use a portion of an extension and have the rest “carry over” to another extension. If extraordinary circumstances (illness, family emergency, etc.) prevent a student from meeting a deadline, the student must inform their instructor before the deadline.
&lt;/p&gt;
&lt;h3 id=&#34;headline-14&#34;&gt;
Books
&lt;/h3&gt;
&lt;p&gt;
We will be using a draft of a book that Anne Rogers and Borja Sotomayor are writing for this course. The book is available in both HTML and PDF format. Note that you will be asked for your CNetID and password to gain access to these files.
&lt;/p&gt;
&lt;h3 id=&#34;headline-15&#34;&gt;
Policy on academic honesty
&lt;/h3&gt;
&lt;p&gt;
We take academic honesty very seriously in this class. Please make sure to read our Academic Honesty page.
&lt;/p&gt;
&lt;h3 id=&#34;headline-16&#34;&gt;
Diversity statement
&lt;/h3&gt;
&lt;p&gt;
The University of Chicago is committed to diversity and rigorous inquiry that arises from multiple perspectives. We concur with that commitment and also believe that we have the highest quality interactions and can creatively solve more problems when we recognize and share our diversity. We thus expect to maintain a productive learning environment based upon open communication, mutual respect, and non-discrimination. We view the diversity that students bring to this class as a resource, strength and benefit. It is our intent to present materials and activities that are respectful of diversity: gender, sexuality, disability, socioeconomic status, ethnicity, race, religious background, and immigration status. Any suggestions as to how to further such a positive and open environment in the class will be appreciated and given serious consideration.
&lt;/p&gt;
&lt;h3 id=&#34;headline-17&#34;&gt;
Disability statement
&lt;/h3&gt;
&lt;p&gt;
If there are circumstances that make our learning environment and activities difficult, please let us know. We will maintain the confidentiality of any such discussions. If you need accommodations due to a disability you will also need to contact Student Disability Services at 773-702-6000, or disabilities@uchicago.edu
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Academic honesty</title>
      <link>https://DiogoFerrari.github.io/teaching/2019-fall-uchicago-capp-30121/acad-honesty/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://DiogoFerrari.github.io/teaching/2019-fall-uchicago-capp-30121/acad-honesty/</guid>
      <description>&lt;p&gt;
The University of Chicago has a &lt;a href=&#34;https://studentmanual.sites.uchicago.edu/Policies#Honesty&#34;&gt;formal policy on academic honesty&lt;/a&gt; that you are expected to adhere to. In this page, we elaborate on how we view academic honesty as it relates to this course, and provide some rules to ensure that you do not cross the line into academic dishonesty.
&lt;/p&gt;
&lt;p&gt;
Academic dishonesty can encompass many activities, but one of the gravest is plagiarism: knowingly handing in someone else’s work as your own, whether it be work done by another student in the class or available publicly on the Internet. This class has a zero tolerance policy for plagiarism. If we determine that you committed plagiarism, you will receive an F in the course no matter how seemingly small the offense. All cases will be referred to the Dean of Students office, which may impose further penalties, including suspension and expulsion.
&lt;/p&gt;
&lt;p&gt;
Please note that plagiarism is fairly easy for us to detect: we use a series of automated tools that look for similarities between your code and other students’ code, including code submitted in previous offerings of this class. If you use someone else’s code, it is very likely you will get caught and, to reiterate, you will then automatically receive an F in the class.
&lt;/p&gt;
&lt;p&gt;
Fortunately, avoiding plagiarism is very simple! For the most part, you just need to make sure you follow these simple rules:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
DO NOT ask another student in the class to show you or e-mail you their code. It doesn’t matter how you want to use it: even if you just want to skim through their solution for inspiration, this is still plagiarism. Needless to say, you MUST NOT use someone else’s code (with or without their permission) in your own solution.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Similarly, DO NOT show or share your code with another student in the class. If someone in the class asks you to share your code with them, even if you’re certain they won’t use it and they just want to look at it to get “unstuck”, please point them to this page. Take into account that, if you willingly share your code with someone else, you are not being a “Good Samaritan”: instead you are an equally guilty party in a plagiarism offense, and will receive the exact same penalty as the student who used your code.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
DO NOT post your code in publicly-accessible websites, like pastebin, a public GitHub repository, GitHub gists, etc. While these tools may seem like convenient mechanisms for sharing code with an instructor/TA or with a project partner, they can also expose your code to other students in the class. You are provided with a private repository on our GitLab server, and you should use that repository exclusively to share code with your project partner, or with the instructional staff. If you do post your code in a publicly-accessible location, and we find out about it outside of a plagiarism incident, you will just get a warning. However, if another student in the class uses code that you posted on such a site (even if you did not intend for that code to be used by someone else), you be considered an equally guilty party in a plagiarism offense, and will receive the exact same penalty as the student who used your code.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
In general, DO NOT use code you find on the Internet. There are certain situations where consulting and citing online sources (including those that may show code examples) is appropriate, and we elaborate on this point below. However, please be aware that, the moment you use code on the Internet, you are walking into an academic honesty minefield (and, even if you provide a citation, you may not get any credit for that code).
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
We realize that sometimes students commit plagiarism out of desperation and as a measure of last resort. If you are in this situation, please just ask the instructors for help. If you are having a hard time in the class, we will provide as much assistance as we can. Plus, a poor performance in one assignment is unlikely to wreck your grade for the class. Plagiarism is never worth it.
&lt;/p&gt;
&lt;p&gt;
All that said, we do encourage a collaborative environment in this class, as long as it doesn’t slip into the realm of plagiarism. If a given assignment requires you to work with another student, you may share code with that student only for that assignment. You are also welcome to discuss aspects of an assignment with other students in the class, as long as you don’t share or write code together.
&lt;/p&gt;
&lt;p&gt;
Please note that this also includes “whiteboarding”: discussing an assignment with other students by sketching out code on a whiteboard may cross the line into academic dishonesty (even when using pseudocode). If you do sketch out code on a whiteboard, do not rely on the verbatim contents of the whiteboard when writing your solution (we recommend that you do not take photos of the whiteboard or verbatim copy anything from the whiteboard into your own code). You should instead focus on using the whiteboard discussion as a way to understand the high-level aspects of the problem, and then writing your own code from scratch. Also, please make sure to erase the board!
&lt;/p&gt;
&lt;p&gt;
In any case, if you have discussed parts of an assignment with someone else, then make sure to say so in your submission (e.g., in a README file or as a comment at the top of your source code file).
&lt;/p&gt;
&lt;p&gt;
Using outside sources is generally acceptable as long as:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
You cite the source you used.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
You do not use verbatim blocks of code from that source.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The source does not provide a complete (or nearly complete) solution to the assignment.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Some sources may provide small code examples that are used to illustrate a concept. We encourage you to never use those examples verbatim in your code, but we understand that, in some cases, your own code may be reasonably similar to those examples (e.g., because there are very few ways in which a given piece of code could be written). To ensure this is not flagged as plagiarism, always err on the side of including a citation.
&lt;/p&gt;
&lt;p&gt;
Please note that you do not need to cite the course book or the Python documentation (as long as you are not using verbatim blocks of code from them).
&lt;/p&gt;
&lt;p&gt;
Finally, if you have any questions regarding what would or would not be considered academic dishonesty in this course, please don’t hesitate to ask the instructor.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
